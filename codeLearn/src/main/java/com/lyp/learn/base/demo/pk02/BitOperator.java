package com.lyp.learn.base.demo.pk02;

/**
 * @Author: liyapu
 * @Description:
 * @create: 2018-11-11 19:20
 */
public class BitOperator {
    public static void main(String[] args) {
       Integer num1 = 5; //二进制补码表示：00000000  00000000 00000000 00000101
       Integer num2 = -5;//二进制补码表示：11111111 11111111 11111111 11111011
        System.out.println(Integer.toBinaryString(num1));//101  省略了前面的29个0
        System.out.println(Integer.toBinaryString(num2));//11111111111111111111111111111011
        System.out.println("----------------------------------");
        /**
         * 第一步: 5 补码表示：00000000  00000000 00000000 00000101
         * 第二步: ~ 取反   : 11111111  11111111  11111111 11111010
         * 第三步: 对第二步的取反后的补码，我们要推出原码，即减1先变成反码
         *                   11111111  11111111  11111111 11111001
         * 第四步: 对第三步的反码,符号位不变，其它位取反变成原码
         *                  10000000   00000000  00000000 00000110
         * 第五步: 对第四步的原码，转成真实数值，最高位是1，表示是个负数
         *          -6
         */
        System.out.println("~" + num1 + "=" +  ~num1); // -6
        /**
         * 第一步: -5 补码表示：11111111 11111111 11111111 11111011
         * 第二步: ~取反     ：00000000  00000000 00000000 00000100
         * 第三步: 对第二步的补码，我们要推出原码。由于最高位是0，表示正数，故就是原码，转成真实数值
         *                  4
         */
        System.out.println("~" + num2 + "=" +  ~num2);//4
        /**
         *       5 补码表示：00000000  00000000 00000000 00000101
         *      -5 补码表示：11111111 11111111 11111111 11111011
         *      按位与    :  00000000 00000000 00000000 000000001
         *     对按位与的补码，我们要推出原码。由于最高位是0，表示正数，故就是原码，转成真实数值
         *                  1
         */
        System.out.println("num1 & num2 = " +(num1 & num2)); //1
        /**
         *       5 补码表示：00000000  00000000 00000000 00000101
         *      -5 补码表示：11111111 11111111 11111111 11111011
         *      按位或    : 11111111 11111111 11111111 11111111
         *     对按位或的补码，我们要推出原码，即减1先变成反码
         *                 11111111 11111111 11111111 11111110
         *     对上步反码,符号位不变，其它位取反变成原码
         *                10000000 00000000 00000000 00000001
         *     对原码，转成真实数值，最高位是1，表示是个负数
         *              -1
         */
        System.out.println(num1 + " | " + num2 + " = " +(num1 | num2));//-1
        System.out.println("----------------------------------");
        /**
         * 第一步: 5 补码表示：00000000  00000000 00000000 00000101
         * 第二步: 右移2位，被移走的最高位(最左边的位)由原来的最高位的数字补充
         *   (最左边补00)   00  00000000  00000000 00000000 000001  (最右边的01被移走了)
         * 第三步: 对第二步的补码，我们要推出原码。由于最高位是0，表示正数，故就是原码，转成真实数值
         *          1
         */
        System.out.println(num1 + " >> 2 = " + (num1 >> 2));

        /**
         * 第一步: 5 补码表示：00000000  00000000 00000000 00000101
         * 第二步: 无符号右移2位，被移走的最高位(最左边的位)由0补充
         *   (最左边补00)   00  00000000  00000000 00000000 000001  (最右边的01被移走了)
         * 第三步: 对第二步的补码，我们要推出原码。由于最高位是0，表示正数，故就是原码，转成真实数值
         *          1
         */
        System.out.println(num1 + " >>> 2 = " + (num1 >>>2)); //1

        /**
         * 第一步: -5 补码表示：11111111 11111111 11111111 11111011
         * 第二步: 右移2位，被移走的最高位(最左边的位)由原来的最高位的数字补充
         *    (最左边补11)  11   11111111 11111111 11111111 111110  (最右边的11被移走了)
         * 第三步: 对第二步的补码，我们要推出原码，即减1先变成反码
         *                 11   11111111 11111111 1111111  111101
         * 第四步:对第三步的反码,符号位不变，其它位取反变成原码
         *                10   00000000 00000000 00000000 000010
         * 第五步: 对第四步的原码，最高位是1，表示负数，转成真实数值
         *              -2
         */
        System.out.println(num2 + " >> 2 = " + (num2 >> 2)); //-2

        /**
         * 第一步: -5 补码表示：11111111 11111111 11111111 11111011
         * 第二步: 右移2位，被移走的最高位(最左边的位)由0补充
         *    (最左边补00)  00   11111111 11111111 11111111 111110  (最右边的11被移走了)
         * 第三步: 对第二步的补码，我们要推出原码。由于最高位是0，表示正数，故就是原码，转成真实数值
         *                  ‭1073741822‬
         */
        System.out.println(num2  + " >>> 2 = " + (num2 >>> 2));//‭1073741822‬
        System.out.println("----------------------------------");
        /**
         * 第一步: 5 补码表示：    00000000  00000000 00000000 00000101
         * 第二步: 除符号位外，移除最左2位
         *                      000000  00000000 00000000 00000101 00  (最右边补00)
         * 第三步: 把第二步的补码，我们要推出原码。由于最高位是0，表示正数，故就是原码，转成真实数值
         *                      20
         */
        System.out.println(num1 + " << 2 = " + (num1 << 2));//2
        /**
         * 第一步: -5 补码表示：11111111 11111111 11111111 11111011
         * 第二步: 除符号位外，移除最左2位
         *                   111111 11111111 11111111 11111011 00 (最右边补00)
         * 第三步: 对于第二步的补码，我们要推出原码，即减1先变成反码
         *                   111111 11111111 11111111 11111010 11
         * 第四步: 对第三步的反码,符号位不变，其它位取反变成原码
         *                  100000 00000000 00000000 00000101 00
         * 第五步: 对第四步原码，最高位是1，表示负数，转成真实数值
         *                  -20
         */
        System.out.println(num2 + " << 2 = " + (num2 << 2));//-20
    }
}
